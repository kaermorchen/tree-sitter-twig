==================
Identifier
==================
{{ user }}
---
(template
  (output
    (identifier)))

==================
Null
==================
{{ null }}
---
(template
  (output
    (null)))

==================
None
==================
{{ none }}
---
(template
  (output
    (null)))

==================
Interger
==================
{{ 42 }}
---
(template
  (output
    (number)))

==================
Float
==================
{{ 42.35 }}
---
(template
  (output
    (number)))

==================
True
==================
{{ true }}
---
(template
  (output
    (boolean)))

==================
False
==================
{{ false }}
---
(template
  (output
    (boolean)))

==================
String
==================
{{ 'hello' }}
---
(template
  (output
    (string)))

==================
String interpolation
==================
{{ "foo #{ 43 } #{ bar } baz" }}
---
(template
  (output
    (interpolated_string
      (string)
      (number)
      (string)
      (identifier)
      (string))))

==================
String interpolation deeper
==================
{{ "foo #{"foo #{bar} baz"} baz" }}
---
(template
  (output
    (interpolated_string
      (string)
      (interpolated_string
        (string)
        (identifier)
        (string))
      (string))))

==================
String interpolation escaped character
==================
{{ "foo \#{} \" \n" }}
---
(template
  (output
    (string)))

==================
Array empty
==================
{{ [] }}
---
(template
  (output
    (array)))

==================
Array
==================
{{ [1, 2, 'foo', "bar"] }}
---
(template
  (output
    (array
      (number)
      (number)
      (string)
      (string))))

==================
Array with end comma
==================
{{ [1, 2,] }}
---
(template
  (output
    (array
      (number)
      (number))))

==================
Object empty
==================
{{ {} }}
---
(template
  (output
    (object)))

==================
Object
==================
{{ {'foo': 'bar'} }}
---
(template
  (output
    (object
      (pair
        (string)
        (string)))))

==================
Object property keys as names
==================
{{ { foo: 'foo', bar: 'bar' } }}
---
(template
  (output
    (object
      (pair
        (string)
        (string))
      (pair
        (string)
        (string)))))

==================
Object property keys as integer
==================
{{ { 2: 'foo', 4: 'bar' } }}
---
(template
  (output
    (object
      (pair
        (number)
        (string))
      (pair
        (number)
        (string)))))

==================
Object property as the variable name
==================
{{ { foo } }}
---
(template
  (output
    (object
      (string))))

==================
Object parentheses property
==================
{{ { (foo): 'foo' } }}
---
(template
  (output
    (object
      (pair
        (computed_property_name
          (identifier))
        (string)))))

==================
Arrow function with arguments
==================
{{ (a, b) => 42 }}
---
(template
  (output
    (arrow_function
      (formal_parameters
        (identifier)
        (identifier))
      (number))))

==================
Arrow function without arguments
==================
{{ () => 42 }}
---
(template
  (output
    (arrow_function
      (formal_parameters)
      (number))))

==================
Arrow function single argument
==================
{{ v => 42 }}
---
(template
  (output
    (arrow_function
      (identifier)
      (number))))

==================
Parenthesized expression
==================
{{ (42) }}
---
(template
  (output
    (parenthesized_expression
      (number))))

==================
Member expression
==================
{{ user.name }}
---
(template
  (output
    (member_expression
      (identifier)
      (property_identifier))))

==================
Member expression index
==================
{{ arr.0 }}
---
(template
  (output
    (member_expression
      (identifier)
      (property_identifier))))

==================
Member expression deeper
==================
{{ user.name.first }}
---
(template
  (output
    (member_expression
      (member_expression
        (identifier)
        (property_identifier))
      (property_identifier))))

==================
Subscript expression
==================
{{ user['name'] }}
---
(template
  (output
    (subscript_expression
      (identifier)
      (string))))

==================
Subscript expression slice
==================
{{ '123456'[1:2] }}
{{ '123456'[:-2] }}
{{ [1,2,3][2:] }}
{{ [1,2,3][:] }}
---
(template
  (output
    (subscript_expression
      (string)
      (slice
        (number)
        (number))))
  (output
    (subscript_expression
      (string)
      (slice
        (unary_expression
          (number)))))
  (output
    (subscript_expression
      (array
        (number)
        (number)
        (number))
      (slice
        (number))))
  (output
    (subscript_expression
      (array
        (number)
        (number)
        (number))
      (slice))))

==================
Subscript expression deeper
==================
{{ user['name'][prop] }}
---
(template
  (output
    (subscript_expression
      (subscript_expression
        (identifier)
        (string))
      (identifier))))

==================
Call expression without arguments
==================
{{ range() }}
---
(template
  (output
    (call_expression
      (identifier)
      (arguments))))

==================
Call expression with arguments
==================
{{ range(0, 3) }}
---
(template
  (output
    (call_expression
      (identifier)
      (arguments
        (number)
        (number)))))

==================
Call expression with one argument
==================
{{ join(',') }}
---
(template
  (output
    (call_expression
      (identifier)
      (arguments
        (string)))))

==================
Call expression with one named argument
==================
{{ join(splitter=',') }}
---
(template
  (output
    (call_expression
      (identifier)
      (arguments
        (named_argument
          (string)
          (string))))))

==================
Call expression with named arguments
==================
{{ range(low=1, high=10, step=2) }}
---
(template
  (output
    (call_expression
      (identifier)
      (arguments
        (named_argument
          (string)
          (number))
        (named_argument
          (string)
          (number))
        (named_argument
          (string)
          (number))))))

==================
Call expression with arguments and named arguments
==================
{{ "now"|date('d/m/Y H:i', timezone="Europe/Paris") }}
---
(template
  (output
    (filter_expression
      (string)
      (identifier)
      (arguments
        (string)
        (named_argument
          (string)
          (string))))))

==================
Unary expression
==================
{{ -42 }}
---
(template
  (output
    (unary_expression
      (number))))

==================
Binary expression
==================
{{ a + b }}
---
(template
  (output
    (binary_expression
      (identifier)
      (identifier))))

==================
Binary and unary expressions
==================
{{ -42 + a * 'b' }}
---
(template
  (output
    (binary_expression
      (unary_expression
        (number))
      (binary_expression
        (identifier)
        (string)))))

==================
Ternary operator
==================
{{ foo ? 'yes' : 'no' }}
---
(template
  (output
    (ternary_expression
      (identifier)
      (string)
      (string))))

==================
Ternary operator short
==================
{{ foo ?: 'no' }}
---
(template
  (output
    (ternary_expression
      (identifier)
      (string))))

==================
Filter without arguments
==================
{{ name|title }}
---
(template
  (output
    (filter_expression
      (identifier)
      (identifier))))

==================
Filter with arguments
==================
{{ name|join(', ') }}
---
(template
  (output
    (filter_expression
      (identifier)
      (identifier)
      (arguments
        (string)))))

==================
Filter multiple
==================
{{ name|striptags|title }}
---
(template
  (output
    (filter_expression
      (filter_expression
        (identifier)
        (identifier))
      (identifier))))
