==================
Tag
==================
{% unknown_tag 2 + 3%}
---
(template
  (tag_statement
    (tag)
    (binary_expression
      (number)
      (number))))

==================
Set
==================
{% set foo = [1, 2] %}
---
(template
  (set_statement
    (identifier)
    (array
      (number)
      (number))))

==================
Set several variables
==================
{% set foo, bar = 'foo', 'bar' %}
---
(template
  (set_statement
    (identifier)
    (identifier)
    (string)
    (string)))

==================
Set block
==================
{% set foo %}
  Hello
{% endset %}
---
(template
  (set_block_statement
    (identifier)
    (content)))

==================
Apply
==================
{% apply upper %}
  his text becomes uppercase
{% endapply %}
---
(template
  (apply_statement
    (identifier)
    (content)))

==================
Apply multiple filters
==================
{% apply lower|escape('html') %}
  <strong>SOME TEXT</strong>
{% endapply %}
---
(template
  (apply_statement
    (filter_expression
      (identifier)
      (identifier)
      (arguments
        (string)))
    (content)))

==================
Autoescape
==================
{% autoescape %}
  Everything will be automatically escaped in this block
  using the HTML strategy
{% endautoescape %}
---
(template
  (autoescape_statement
    (content)))

==================
Autoescape string argument
==================
{% autoescape 'html' %}
  Everything will be automatically escaped in this block
  using the HTML strategy
{% endautoescape %}
---
(template
  (autoescape_statement
    (string)
    (content)))

==================
Autoescape boolean argument
==================
{% autoescape false %}
  Everything will be automatically escaped in this block
  using the HTML strategy
{% endautoescape %}
---
(template
  (autoescape_statement
    (boolean)
    (content)))

==================
Block
==================
{% block title %}Index{% endblock %}
---
(template
  (block_statement
    (identifier)
    (content)))

==================
Block with end-tag
==================
{% block sidebar %}{% endblock sidebar %}
---
(template
  (block_statement
    (identifier)
    (identifier)))

==================
Block shortcut
==================
{% block title page_title|title %}
---
(template
  (block_statement
    (identifier)
    (filter_expression
      (identifier)
      (identifier))))

==================
Cache
==================
{% cache "cache key" %}
    Cached forever (depending on the cache implementation)
{% endcache %}
---
(template
  (cache_statement
    (string)
    (content)))

==================
Cache with key and expiration
==================
{% cache "cache key" ttl(300) %}
    Cached for 300 seconds
{% endcache %}
---
(template
  (cache_statement
    (string)
    (call_expression
      (identifier)
      (arguments
        (number)))
    (content)))

==================
Deprecated
==================
{% deprecated 'The "base.twig" template is deprecated, use "layout.twig" instead.' %}
---
(template
  (deprecated_statement
    (string)))

==================
Do
==================
{% do 1 + 2 %}
---
(template
  (do_statement
    (binary_expression
      (number)
      (number))))

==================
Embed
==================
{% embed "teasers_skeleton.twig" %}{% endembed %}
---
(template
  (embed_statement
    (string)))

==================
Embed with variable
==================
{% embed "base" with {'foo': 'bar'} %}
    ...
{% endembed %}
---
(template
  (embed_statement
    (string)
    (object
      (pair
        (string)
        (string)))
    (content)))

==================
Embed with variable only
==================
{% embed "base" with {'foo': 'bar'} only %}
    ...
{% endembed %}
---
(template
  (embed_statement
    (string)
    (object
      (pair
        (string)
        (string)))
    (content)))

==================
Embed ignore missing
==================
{% embed "base" ignore missing %}
    ...
{% endembed %}
---
(template
  (embed_statement
    (string)
    (content)))

==================
Extends
==================
{% extends "base.twig" %}
---
(template
  (extends_statement
    (string)))

==================
Extends with ternary operator
==================
{% extends standalone ? "minimum.html" : "base.html" %}
---
(template
  (extends_statement
    (ternary_expression
      (identifier)
      (string)
      (string))))

==================
Flush
==================
{% flush %}
---
(template
  (flush_statement))
